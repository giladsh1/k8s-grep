#!/usr/bin/env python3

from argparse import ArgumentParser
from subprocess import Popen, PIPE

import shlex
try:
    import yaml
except ModuleNotFoundError:
    print("Error - Python YAML package is not installed, execute 'python -m pip install pyyaml' to install it and try again.")
    exit(1)


def run_command_validate(command):
    try:
        p = Popen(shlex.split(command), stdout=PIPE,
                stderr=PIPE, universal_newlines=True)
        out, err = p.communicate()
        if p.returncode != 0:
            print(
                f"ERROR - command: {command} returned a non exit-code status or stderr is not empty!\n")
            print(f"exit code: {p.returncode}, stderr: {err}")
            exit(1)
        return(out)
    except Exception as e:
        print(e.message)
        exit(1)


parser = ArgumentParser(usage='%(prog)s [options]')
parser.add_argument("-d", "--directory", action="store", dest="directory", default=None,
                    required=True, help="directory path to build")
name_matcher = parser.add_mutually_exclusive_group()
name_matcher.add_argument("-n","--name", action="append", dest="name", default=None,
                    help="filter by name - can be passed multiple times")
name_matcher.add_argument("-xn", "--exclude-name", action="append", dest="xname", default=None,
                    help="exclude by name - can be passed multiple times")
kind_matcher = parser.add_mutually_exclusive_group()
kind_matcher.add_argument("-k", "--kind", action="append", dest="kind", default=None,
                    help="filter by kind - can be passed multiple times")
kind_matcher.add_argument("-xk", "--exclude-kind", action="append", dest="xkind", default=None,
                    help="exclude by kind - can be passed multiple times")
args = parser.parse_args()


kustomize_out = run_command_validate(f'kustomize build {args.directory}')
k8s_objects = yaml.safe_load_all(kustomize_out)
matches = []
for obj in k8s_objects:
    if not ('kind' in obj and 'metadata' in obj and 'name' in obj['metadata']):
        print(f'Error in object {0}\nCould not find kind or metadata.name field!')
        exit(1)
    if args.kind is not None \
        and not any(k for k in args.kind if k.lower() == obj['kind'].lower()):
            continue
    if args.xkind is not None \
        and any(k for k in args.xkind if k.lower() == obj['kind'].lower()):
            continue

    if args.name is not None \
        and not any(k for k in args.name if k.lower() == obj['metadata']['name'].lower()):
            continue
    if args.xname is not None \
        and any(k for k in args.xname if k.lower() == obj['metadata']['name'].lower()):
            continue
    matches.append(obj)

print(yaml.safe_dump_all(matches))
